{"version":3,"sources":["view/register.js"],"names":["Wrapper","styled","div","Title","h1","Component","AuthStore","useStore","history","useHistory","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","console","log","setUsername","username","setPassword","password","register","then","push","catch","e","onFinishFailed","errorInfo","autoComplete","Item","label","rules","required","message","validator","rule","value","test","Promise","reject","lenth","resolve","min","max","Password","offset","type","htmlType"],"mappings":"uLAMMA,EAAQC,IAAOC,IAAR,iJAOPC,EAAMF,IAAOG,GAAR,uEA+IIC,UA1IG,WAAO,IAChBC,EAAaC,cAAbD,UACDE,EAAUC,cAkChB,OACE,eAACT,EAAD,WACC,cAACG,EAAD,2BAID,eAAC,IAAD,CACEO,KAAK,QACLC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,cAAe,CACbC,UAAU,GAEZC,SAhDa,SAAAC,GACfC,QAAQC,IAAI,YAAaF,GACzBX,EAAUc,YAAYH,EAAOI,UAC7Bf,EAAUgB,YAAYL,EAAOM,UAC7BjB,EAAUkB,WACPC,MAAK,WACJP,QAAQC,IAAI,2DACZX,EAAQkB,KAAK,QACZC,OAAM,SAACC,GACRV,QAAQC,IAAIS,GACZV,QAAQC,IAAI,gCAuCdU,eAnCmB,SAACC,GACtBZ,QAAQC,IAAI,UAAWW,IAmCrBC,aAAa,MAbf,UAeE,cAAC,IAAKC,KAAN,CACEC,MAAM,qBACNvB,KAAK,WACLwB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,yCACT,CACAC,UA1Cc,SAACC,EAAKC,GAC1B,MAAG,KAAKC,KAAKD,GAAeE,QAAQC,OAAO,gEACxCH,EAAMI,MAAM,GAAKJ,EAAMI,MAAM,GAAWF,QAAQC,OAAO,wDACnDD,QAAQG,aA+Bf,SAYE,cAAC,IAAD,MAGF,cAAC,IAAKZ,KAAN,CAEEC,MAAM,eACNvB,KAAK,WACLwB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,wCACT,CACAS,IAAI,EACJT,QAAQ,mCAER,CACAU,IAAI,GACJV,QAAQ,qCAdd,SAkBE,cAAC,IAAMW,SAAP,MAiCF,cAAC,IAAKf,KAAN,CACEnB,WAAY,CACVmC,OAAQ,GACRpC,KAAM,IAHV,SAME,cAAC,IAAD,CAAQqC,KAAK,UAAUC,SAAS,SAAhC","file":"static/js/11.95b2b1dd.chunk.js","sourcesContent":["import { Form, Input, Button,message } from 'antd';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useStore } from '../store';  // 引入useStore，user是对Auth的进一步封装，通过他，我们的V层，可以与M层交互\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Wrapper=styled.div`\r\nmax-width:600px;\r\nmargin:30px auto;\r\nbox-shadow:2px 2px 2px 3px rgba(0,0,0,0.3);\r\nborder-radius:6px;\r\npadding:20px;\r\n`\r\nconst Title=styled.h1`  \r\ntext-align:center;\r\nmargin-bottom:25px;\r\n`\r\n\r\nconst Component = () => {\r\n  const {AuthStore} = useStore(); // 我怀疑userStore是以一个构造函数，而不用new 用{AuthStore}\r\n  const history = useHistory();\r\n\r\n\r\n  const onFinish = values => {\r\n    console.log('Success2:', values);\r\n    AuthStore.setUsername(values.username);\r\n    AuthStore.setPassword(values.password);\r\n    AuthStore.register()\r\n      .then(() => {\r\n        console.log('注册成功,跳转到首页')\r\n        history.push('/')\r\n      }).catch((e)=>{\r\n        console.log(e)\r\n        console.log('注册失败')\r\n      })\r\n};\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n   const validateUsername=(rule,value)=>{ // 注意，正则表达式的W是大写的！\r\n      if(/\\W/.test(value)) return Promise.reject('只能是字母数字下划线');\r\n      if(value.lenth<4 || value.lenth>10) return Promise.reject('字符长度只能是4-10位');\r\n      return Promise.resolve()\r\n   };\r\n\r\n  //  const validateConfirm = ({getFieldValue}) => ({\r\n  //     validator(rule,value){\r\n  //        if(getFieldValue('password')===value) return Promise.resolve\r\n  //        return Promise.reject('两次密码不一致')\r\n  //    }\r\n  //  });\r\n\r\n  return (\r\n    <Wrapper>\r\n     <Title>\r\n       注册\r\n     </Title>\r\n\r\n    <Form\r\n      name=\"basic\"\r\n      labelCol={{\r\n        span: 4,\r\n      }}\r\n      wrapperCol={{\r\n        span: 20,\r\n      }}\r\n      initialValues={{\r\n        remember: true,\r\n      }}\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n      autoComplete=\"off\"\r\n    >\r\n      <Form.Item\r\n        label=\"用户名\"\r\n        name=\"username\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: '请输入用户名!',\r\n          },{\r\n            validator:validateUsername\r\n          }\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        \r\n        label=\"密码\"\r\n        name=\"password\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: '请输入密码！',\r\n          },{\r\n            min:4,\r\n            message:'最小4个字符'\r\n\r\n          },{\r\n            max:10,\r\n            message:'最大10个字符'\r\n          }\r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n       {/* 确认密码  */}\r\n \r\n       {/* 不知道为什么，加了confirm就不行，我也不懂为什么 */}\r\n\r\n      {/* <Form.Item\r\n        label=\"确认密码\"\r\n        name=\"confirm\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: '请确认密码！',\r\n          },\r\n          validateConfirm \r\n        ]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item> */}\r\n\r\n      {/* 没有用的cheackbox栏 */}\r\n      {/* <Form.Item\r\n        name=\"remember\"\r\n        valuePropName=\"checked\"\r\n        wrapperCol={{\r\n          offset: 8,\r\n          span: 16,\r\n        }}\r\n      >\r\n        <Checkbox>Remember me</Checkbox>\r\n      </Form.Item> */}\r\n\r\n      <Form.Item\r\n        wrapperCol={{\r\n          offset: 10,\r\n          span: 30,\r\n        }}\r\n      >\r\n        <Button type=\"primary\" htmlType=\"submit\" >\r\n        提交\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Component;"],"sourceRoot":""}